<%- include('../components/layout') %>
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }
    .modal-content {
        background-color: #1a1c20;
        padding: 2rem;
        border-radius: 0.5rem;
        max-width: 90%;
        max-height: 90%;
        overflow: auto;
        transform: scale(0.9);
        opacity: 0;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }
    .modal-overlay.active {
        opacity: 1;
        visibility: visible;
    }
    .modal-overlay.active .modal-content {
        transform: scale(1);
        opacity: 1;
    }
    .loader {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #f97316;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        display: inline-block;
        vertical-align: middle;
        margin-right: 8px;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .subuser-list-item {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.375rem;
        transition: background-color 0.2s ease;
        cursor: pointer;
    }
    .subuser-list-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    .subuser-list-item .icon {
        margin-right: 0.75rem;
    }
    .subuser-list-item .name {
        flex-grow: 1;
    }
    .subuser-list {
        display: block;
    }
</style>
<main class="flex-grow container mx-auto px-4 py-8">
    

    <%- include('../components/server') %>

    <div class="bg-white/5 rounded-xl p-6 mb-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold">Subusers</h2>
            <button id="add-subuser" class="bg-indigo-500 hover:bg-indigo-700 text-white font-medium py-1.5 px-4 rounded-full hover:scale-95 transition">Add Subuser</button>
        </div>
        <div id="subuser-list" class="space-y-2">
        </div>
    </div>
</main>

<div id="add-subuser-modal" class="modal-overlay z-50">
    <div class="modal-content">
        <h3 class="text-xl font-semibold mb-4">Add Subuser</h3>
        <form id="add-subuser-form">
            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-300 mb-1">Email</label>
                <input type="email" id="email" name="email" required class="w-full px-3 py-2 bg-white/5 border border-white/5 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
            </div>
            <div class="flex justify-end">
                <button type="button" id="cancel-add" class="bg-neutral-600 hover:bg-neutral-700 text-white font-medium py-2 px-4 rounded-xl transition mr-2">Cancel</button>
                <button type="submit" class="bg-indigo-500 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-xl transition">Add Subuser</button>
            </div>
        </form>
    </div>
</div>

<div id="confirm-delete-modal" class="modal-overlay z-50">
    <div class="modal-content">
        <h3 class="text-xl font-semibold mb-4">Confirm Delete</h3>
        <p class="mb-4">Are you sure you want to remove this subuser?</p>
        <div class="flex justify-end">
            <button id="cancel-delete" class="bg-neutral-600 hover:bg-neutral-700 text-white font-medium py-2 px-4 rounded-xl transition mr-2">Cancel</button>
            <button id="confirm-delete" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-xl transition">Remove</button>
        </div>
    </div>
</div>

<script>
    const serverId = new URLSearchParams(window.location.search).get('id');
    let subuserToDelete = null;

    function showLoader(elementId) {
        const element = document.getElementById(elementId);
        element.innerHTML = `<svg class="animate-spin h-8 w-8 text-white mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>`;
    }

    function hideLoader(elementId) {
        const element = document.getElementById(elementId);
        element.innerHTML = '';
    }

    function loadSubuserList() {
        showLoader('subuser-list');
        fetch(`/api/server/${serverId}/users`)
            .then(response => response.json())
            .then(data => {
                const subuserList = document.getElementById('subuser-list');
                subuserList.innerHTML = '';
                data.data.forEach(subuser => {
                    const subuserItem = createSubuserItem(subuser);
                    subuserList.appendChild(subuserItem);
                });
            })
            .catch(error => {
                console.error('Error loading subusers:', error);
                hideLoader('subuser-list');
            });
    }

    function createSubuserItem(subuser) {
        const item = document.createElement('div');
        item.className = 'subuser-list-item';
        const createdDate = new Date(subuser.attributes.created_at).toLocaleString();

        item.innerHTML = `
            <div class="flex items-center space-x-2 w-full">
                <div class="icon flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mb-0.5 inline-flex mr-1.5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                    </svg>
                </div>
                <span class="text-gray-200 flex-grow">${subuser.attributes.username}</span>
                <span class="text-gray-400 text-sm">${subuser.attributes.email}</span>
                <span class="text-gray-400 text-sm mr-2">${createdDate}</span>
                <button class="delete-subuser bg-red-600 hover:bg-red-700 text-white font-medium py-1 px-4 rounded-full text-sm hover:scale-95" data-uuid="${subuser.attributes.uuid}">Remove</button>
            </div>
        `;

        const deleteButton = item.querySelector('.delete-subuser');
        deleteButton.addEventListener('click', (e) => {
            e.stopPropagation();
            showDeleteConfirmation(subuser.attributes.uuid);
        });

        return item;
    }

    function showDeleteConfirmation(subuserUuid) {
        subuserToDelete = subuserUuid;
        document.getElementById('confirm-delete-modal').classList.add('active');
    }

    function deleteSubuser() {
        if (!subuserToDelete) return;

        fetch(`/api/server/${serverId}/users/${subuserToDelete}`, {
            method: 'DELETE'
        })
        .then(() => {
            loadSubuserList();
            closeModal('confirm-delete-modal');
        })
        .catch(error => {
            console.error('Error deleting subuser:', error);
            alert('An error occurred while removing the subuser. Please try again.');
        })
        .finally(() => {
            subuserToDelete = null;
        });
    }

    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.classList.add('active');
    }

    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.classList.remove('active');
    }

    document.getElementById('add-subuser').addEventListener('click', () => {
        showModal('add-subuser-modal');
    });

    document.getElementById('add-subuser-form').addEventListener('submit', (e) => {
        e.preventDefault();
        const email = document.getElementById('email').value;
        
        fetch(`/api/server/${serverId}/users`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email })
        })
        .then(response => {
            if (response.ok) {
                loadSubuserList();
                closeModal('add-subuser-modal');
                document.getElementById('email').value = '';
            } else {
                throw new Error('Failed to add subuser');
            }
        })
        .catch(error => {
            console.error('Error adding subuser:', error);
            alert('An error occurred while adding the subuser. Please try again.');
        });
    });

    document.getElementById('cancel-add').addEventListener('click', () => {
        closeModal('add-subuser-modal');
    });

    document.getElementById('cancel-delete').addEventListener('click', () => {
        closeModal('confirm-delete-modal');
        subuserToDelete = null;
    });

document.getElementById('confirm-delete').addEventListener('click', deleteSubuser);

    fetch(`/api/server/${serverId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('server-name').textContent = data.attributes.name;
            document.getElementById('server-name-breadcrumb').textContent = data.attributes.name;
            document.getElementById('server-description').textContent = data.attributes.description || "No description set.";
        });

    loadSubuserList();

    function handleError(error, message) {
        console.error(error);
        alert(message);
    }

    function refreshSubuserList() {
        showLoader('subuser-list');
        loadSubuserList();
    }

    document.getElementById('subuser-list').addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-subuser')) {
            const subuserUuid = e.target.getAttribute('data-uuid');
            showDeleteConfirmation(subuserUuid);
        }
    });

    function setupModal(modalId, openButtonId, closeButtonId) {
        const modal = document.getElementById(modalId);
        const openButton = document.getElementById(openButtonId);
        const closeButton = document.getElementById(closeButtonId);

        openButton.addEventListener('click', () => showModal(modalId));
        closeButton.addEventListener('click', () => closeModal(modalId));

        modal.addEventListener('click', (e) => {
            if (e.target === modal) closeModal(modalId);
        });
    }

    setupModal('add-subuser-modal', 'add-subuser', 'cancel-add');
    setupModal('confirm-delete-modal', null, 'cancel-delete');

    document.getElementById('add-subuser-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const email = document.getElementById('email').value.trim();
        
        if (!email) {
            alert('Please enter a valid email address.');
            return;
        }

        try {
            const response = await fetch(`/api/server/${serverId}/users`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email })
            });

            if (!response.ok) {
                throw new Error('Failed to add subuser');
            }

            refreshSubuserList();
            closeModal('add-subuser-modal');
            document.getElementById('email').value = '';
            alert('Subuser added successfully!');
        } catch (error) {
            handleError(error, 'An error occurred while adding the subuser. Please try again.');
        }
    });

    async function deleteSubuser() {
        if (!subuserToDelete) return;

        try {
            const response = await fetch(`/api/server/${serverId}/users/${subuserToDelete}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('Failed to remove subuser');
            }

            refreshSubuserList();
            closeModal('confirm-delete-modal');
            alert('Subuser removed successfully!');
        } catch (error) {
            handleError(error, 'An error occurred while removing the subuser. Please try again.');
        } finally {
            subuserToDelete = null;
        }
    }

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeModal('add-subuser-modal');
            closeModal('confirm-delete-modal');
        }
    });

    function updateAriaAttributes() {
        const subuserItems = document.querySelectorAll('.subuser-list-item');
        subuserItems.forEach((item, index) => {
            item.setAttribute('role', 'listitem');
            item.setAttribute('aria-posinset', index + 1);
            item.setAttribute('aria-setsize', subuserItems.length);
        });
    }

    function onSubuserListUpdated() {
        updateAriaAttributes();
    }

    function loadSubuserList() {
        fetch(`/api/server/${serverId}/users`)
            .then(response => response.json())
            .then(data => {
                const subuserList = document.getElementById('subuser-list');
                subuserList.innerHTML = '';
                data.data.forEach(subuser => {
                    const subuserItem = createSubuserItem(subuser);
                    subuserList.appendChild(subuserItem);
                });
                onSubuserListUpdated();
            })
            .catch(error => {
                handleError(error, 'Error loading subusers. Please refresh the page.');
            });
    }
</script>
<%- include('../components/page-scripts') %>