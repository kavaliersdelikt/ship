<%- include('../components/layout') %>
<main class="flex-grow container mx-auto px-4 py-8">
    <%- include('../components/server') %>

    <div class="bg-gradient-to-br from-gray-900/50 to-gray-800/30 backdrop-blur-xl rounded-2xl p-8 mt-8 border border-white/5 shadow-2xl">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-6 mb-8">
            <div>
                <h2 class="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                    Allocations
                </h2>
                <p class="text-gray-400 mt-2 text-sm">
                    Configure and manage your server's network interfaces and ports
                </p>
            </div>
            
            <button id="create-allocation" class="group relative inline-flex items-center gap-2 px-6 py-3 bg-indigo-600 rounded-xl text-white font-medium shadow-lg shadow-indigo-500/25 hover:shadow-indigo-500/40 transition-all duration-300 hover:-translate-y-0.5">
                <span class="relative">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform group-hover:rotate-90 duration-300" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                </span>
                <span>New Allocation</span>
            </button>
        </div>

        <div id="allocation-error" class="hidden transform -translate-y-2 transition-all duration-300 mb-6">
            <div class="bg-red-500/10 border border-red-500/20 rounded-xl p-4 flex items-center gap-3 text-red-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
                <span></span>
            </div>
        </div>

        <div id="allocations-loading" class="py-32 flex justify-center items-center">
            <div class="relative">
                <div class="h-12 w-12 rounded-full border-t-2 border-b-2 border-white animate-spin"></div>
                <div class="absolute inset-0 flex items-center justify-center">
                    <div class="h-6 w-6 rounded-full bg-indigo-500 animate-pulse"></div>
                </div>
            </div>
        </div>

        <div id="allocations-list" class="hidden grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        </div>

        <div id="allocations-empty" class="hidden">
            <div class="text-center py-32">
                <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gray-800/50 mb-6">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                </div>
                <h3 class="text-xl font-medium text-gray-300 mb-2">No Allocations Found</h3>
                <p class="text-gray-500">Create your first network allocation to get started</p>
            </div>
        </div>
    </div>
</main>

<script>
    const serverId = new URLSearchParams(window.location.search).get('id');

    function loadServerDetails() {
        document.getElementById('allocations-loading').classList.remove('hidden');
        document.getElementById('allocations-list').classList.add('hidden');
        document.getElementById('allocations-empty').classList.add('hidden');

        fetch(`/api/server/${serverId}`)
            .then(response => response.json())
            .then(data => {
                updateAllocationsList(data.attributes.relationships.allocations.data);
            })
            .catch(error => {
                console.error('Error fetching server details:', error);
                showError('Failed to load server details. Please try again.');
            })
            .finally(() => {
                document.getElementById('allocations-loading').classList.add('hidden');
            });
    }

    function updateAllocationsList(allocations) {
        const allocationsList = document.getElementById('allocations-list');
        const emptyState = document.getElementById('allocations-empty');

        if (!allocations || allocations.length === 0) {
            emptyState.classList.remove('hidden');
            allocationsList.classList.add('hidden');
            return;
        }

        allocationsList.classList.remove('hidden');
        emptyState.classList.add('hidden');
        allocationsList.innerHTML = '';

        allocations.forEach(allocation => {
            const allocationElement = document.createElement('div');
            allocationElement.className = 'group relative bg-white/5 hover:bg-white/10 border border-white/10 hover:border-white/20 rounded-xl p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/20 hover:-translate-y-1';
            
            allocationElement.innerHTML = `
                <div class="flex flex-col gap-4">
                    <div class="flex justify-between items-start">
                        <div class="flex items-center gap-3">
                            <span class="text-xl font-semibold text-white font-mono">${allocation.attributes.ip_alias}:${allocation.attributes.port}</span>
                            ${allocation.attributes.is_default ? `
                                <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-500/20 text-green-400 border border-green-500/20">
                                    Default
                                </span>
                            ` : ''}
                        </div>
                        ${!allocation.attributes.is_default ? `
                            <button onclick="deleteAllocation('${allocation.id}')" class="opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-2 hover:bg-red-500/20 rounded-lg text-red-400 hover:text-red-300">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        ` : ''}
                    </div>
                    <div class="space-y-2 text-sm text-gray-400">
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-mono">${allocation.attributes.ip || 'No direct IP'}</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-mono">${allocation.attributes.port}</span>
                        </div>
                    </div>
                </div>
            `;

            allocationsList.appendChild(allocationElement);
        });
    }

    function showError(message) {
        const errorDiv = document.getElementById('allocation-error');
        errorDiv.querySelector('span').textContent = message;
        errorDiv.classList.remove('hidden');
        setTimeout(() => {
            errorDiv.classList.add('hidden');
        }, 5000);
    }

    document.getElementById('create-allocation').addEventListener('click', function() {
        const button = this;
        button.disabled = true;
        button.innerHTML = `
            <div class="h-5 w-5 border-2 border-white/20 border-t-white rounded-full animate-spin"></div>
            <span>Creating...</span>
        `;
        
        fetch(`/api/server/${serverId}/allocations`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to create allocation');
            }
            return response.json();
        })
        .then(data => {
            loadServerDetails();
        })
        .catch(error => {
            showError('You have reached the maximum number of allocations');
        })
        .finally(() => {
            button.disabled = false;
            button.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                <span>New Allocation</span>
            `;
        });
    });

    function deleteAllocation(allocationId) {
        if (!confirm('Are you sure you want to delete this allocation?')) {
            return;
        }

        fetch(`/api/server/${serverId}/allocations/${allocationId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete allocation');
            }
            loadServerDetails();
        })
        .catch(error => {
            showError('Failed to delete allocation. Please try again.');
        });
    }

    document.addEventListener('DOMContentLoaded', loadServerDetails);
</script>

<%- include('../components/page-scripts') %>