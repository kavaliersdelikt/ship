<%- include('./components/layout') %>

<main class="flex-grow container mx-auto px-4 py-8">
    <div class="flex justify-between items-center w-full mx-auto pb-4">
        
        <div class="flex flex-col">
            <h1 class="text-4xl font-bold mb-3 text-white tracking-tight">My Servers</h1>
            <p class="text-white/60 text-base font-medium">Manage your servers and scale resources from your dashboard.</p>
        </div>

        
        <div class="flex items-center gap-3">
            
            <div class="relative inline-block" x-data="{ open: false }">
                <button 
                    @click="open = !open"
                    class="inline-flex items-center justify-center gap-2 px-4 py-2.5 text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-400 rounded-lg transition-all duration-200 shadow-lg shadow-indigo-500/20 hover:shadow-indigo-500/40"
                    style="
                        --bezier: cubic-bezier(0.22, 0.61, 0.36, 1);
                        --edge-light: hsla(0, 0%, 50%, 0.8);
                        --text-light: rgba(255, 255, 255, 0.4);
                        --back-color: 240, 40%;
                        background: linear-gradient(
                            140deg,
                            hsla(var(--back-color), 50%, 1) min(2em, 20%),
                            hsla(var(--back-color), 50%, 0.6) min(8em, 100%)
                        );
                        box-shadow: inset 0.4px 1px 4px var(--edge-light);
                        transition: all 0.1s var(--bezier);
                    "
                    onmouseover="
                        this.style.setProperty('--edge-light', 'hsla(0, 0%, 50%, 1)');
                        this.style.setProperty('text-shadow', '0px 0px 10px var(--text-light)');
                        this.style.setProperty('box-shadow', 'inset 0.4px 1px 4px var(--edge-light), 2px 4px 8px hsla(0, 0%, 0%, 0.295)');
                        this.style.setProperty('transform', 'scale(1.02)');
                    "
                    onmouseout="
                        this.style.setProperty('--edge-light', 'hsla(0, 0%, 50%, 0.8)');
                        this.style.setProperty('text-shadow', 'none');
                        this.style.setProperty('box-shadow', 'inset 0.4px 1px 4px var(--edge-light)');
                        this.style.setProperty('transform', 'scale(1)');
                    "
                >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                    </svg>
                    <span>New Server</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-4 h-4 transition-transform duration-200" :class="open ? 'rotate-180' : ''">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                    </svg>
                </button>

                <div 
                    x-show="open"
                    x-transition:enter="transition ease-out duration-200"
                    x-transition:enter-start="opacity-0 scale-95 -translate-y-2"
                    x-transition:enter-end="opacity-100 scale-100 translate-y-0"
                    x-transition:leave="transition ease-in duration-200"
                    x-transition:leave-start="opacity-100 scale-100 translate-y-0"
                    x-transition:leave-end="opacity-0 scale-95 -translate-y-2"
                    @click.outside="open = false"
                    class="absolute right-0 mt-2 w-48 rounded-xl bg-white/5 backdrop-blur-xl border border-white/10 shadow-lg z-50"
                    style="display: none;"
                >
                    <div class="py-1">
                        <a href="/servers/new" class="flex items-center gap-2 px-4 py-2 text-sm text-white/90 hover:bg-white/10 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 17.25v-.228a4.5 4.5 0 0 0-.12-1.03l-2.268-9.64a3.375 3.375 0 0 0-3.285-2.602H7.923a3.375 3.375 0 0 0-3.285 2.602l-2.268 9.64a4.5 4.5 0 0 0-.12 1.03v.228m19.5 0a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3m19.5 0a3 3 0 0 0-3-3H5.25a3 3 0 0 0-3 3m16.5 0h.008v.008h-.008v-.008Zm-3 0h.008v.008h-.008v-.008Z" />
                            </svg>
                            Game Server
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

   
    
    <div class="container mx-auto px-4 py-8">
        
        <div class="bg-white/[0.02] border border-white/5 rounded-xl p-4 mb-8">
            <div class="grid grid-cols-3 divide-x divide-white/5">
                <div class="px-6">
                    <p class="text-white/40 text-sm mb-1">Active Servers</p>
                    <p class="text-2xl font-semibold text-white"><%= pterodactyl?.data?.length || 0 %></p>
                </div>
                <div class="px-6">
                    <p class="text-white/40 text-sm mb-1">Total Memory</p>
                    <p class="text-2xl font-semibold text-white">
                        <%= (pterodactyl?.data || []).reduce((sum, server) => sum + (server?.attributes?.limits?.memory || 0), 0) %> MB
                    </p>
                </div>
                <div class="px-6">
                    <p class="text-white/40 text-sm mb-1">Total Storage</p>
                    <p class="text-2xl font-semibold text-white">
                        <%= (pterodactyl?.data || []).reduce((sum, server) => sum + (server?.attributes?.limits?.disk || 0), 0) %> MB
                    </p>
                </div>
            </div>
        </div>

        <% pterodactyl.data = pterodactyl.relationships.servers.data %>
        
        <div class="grid gap-6" id="servers-list">
            <% if (pterodactyl.data.length === 0) { %>
                <div class="p-8 rounded-2xl bg-white/5 border border-white/5 text-center">
                    <div class="flex flex-col items-center gap-4">
                        <div class="p-4 rounded-full bg-indigo-500/10">
                            <svg xmlns="http://www.w3.org/2000/svg" class="size-8 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 12h14M12 5l7 7-7 7"/>
                            </svg>
                        </div>
                        <div>
                            <h3 class="text-xl font-semibold text-white mb-2">No servers found</h3>
                            <p class="text-white/60">Get started by creating your first server</p>
                        </div>
                        <a href="/servers/new" class="inline-flex items-center px-6 py-3 text-sm font-medium text-white bg-indigo-500 hover:bg-indigo-400 rounded-lg transition-all duration-200">
                            Create Server
                            <svg xmlns="http://www.w3.org/2000/svg" class="ml-2 size-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                            </svg>
                        </a>
                    </div>
                </div>
            <% } else { %>
                <div class="bg-white/[0.02] rounded-2xl border border-white/5 overflow-hidden">
                    <% pterodactyl.data.forEach((server, index) => { %>
                        <div class="server-row group relative hover:bg-white/[0.03] transition-all duration-200"
                            data-server-id="<%= server.attributes.identifier %>"
                            data-server-numeric="<%= server.attributes.id %>"
                            data-egg="<%= server.attributes.egg %>"
                            onclick="window.location.href='/server/manage?id=<%= server.attributes.identifier%>&numeric=<%= server.attributes.id%>&mode=' + ((<%=server.attributes.egg%> === 18 || <%=server.attributes.egg%> === 19 || <%=server.attributes.egg%> === 18) ? 'vm' : (<%=server.attributes.node%> === 42 || <%=server.attributes.node%> === 51 ? 'rdp' : 'server'))">
                            
                            <div class="flex items-center gap-6 p-6 <%= index !== pterodactyl.data.length - 1 ? 'border-b border-white/5' : '' %>">
                                
                                <% if (server.attributes.node == "42") { %>
                                    <div class="shrink-0 size-3 rounded-full bg-indigo-400 ring-4 ring-indigo-400/20"></div>
                                <% } else { %>
                                    <div class="status-indicator shrink-0 size-3 rounded-full bg-zinc-400 ring-4 ring-zinc-400/20"></div>
                                <% } %>

                                
                                <div class="flex-1">
                                    <h3 class="text-lg font-medium text-white mb-1"><%= server.attributes.name %></h3>
                                    <div class="server-address text-sm text-white/40 font-mono">Fetching...</div>
                                </div>

                                
                                <% if (server.attributes.node == "42") { %>
                                    <div class="shrink-0 px-3 py-1 rounded-full text-xs font-medium bg-indigo-500/20 text-indigo-300">
                                        RDP (Beta)
                                    </div>
                                <% } %>

                                
                                <div class="flex items-center gap-8 <%= server.attributes.node == "42" ? 'hidden' : '' %>">
                                    
                                    <div class="flex items-center gap-3">
                                        <div class="w-32">
                                            <div class="flex justify-between text-xs mb-2">
                                                <span class="text-white/40">Memory</span>
                                                <span class="memory-text text-white/60">0/<%= server.attributes.limits.memory %>MiB</span>
                                            </div>
                                            <div class="h-1 bg-white/5 rounded-full overflow-hidden">
                                                <div class="memory-bar h-full bg-indigo-500 transition-all duration-300" style="width: 0%"></div>
                                            </div>
                                        </div>
                                    </div>

                                    
                                    <div class="flex items-center gap-3">
                                        <div class="w-32">
                                            <div class="flex justify-between text-xs mb-2">
                                                <span class="text-white/40">CPU</span>
                                                <span class="cpu-text text-white/60">0%</span>
                                            </div>
                                            <div class="h-1 bg-white/5 rounded-full overflow-hidden">
                                                <div class="cpu-bar h-full bg-indigo-500 transition-all duration-300" style="width: 0%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                
                                <div class="text-white/20 group-hover:text-white/40 transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>

        
        <div class="mt-12 hidden" id="shared-servers-section">
            <div class="flex items-center gap-3 mb-6">
                <h2 class="text-2xl font-bold text-white">Shared Servers</h2>
                <span class="px-3 py-1 text-xs font-medium bg-indigo-500/10 text-indigo-300 rounded-full">Shared Access</span>
            </div>
            <div class="bg-white/[0.02] rounded-2xl border border-white/5 overflow-hidden" id="shared-servers-list"></div>
        </div>
    </div>

<script>
const serverConnections = new Map();
const serverDetails = new Map();

async function fetchServerDetails(serverId) {
    try {
        const response = await fetch(`/api/server/${serverId}`);
        const data = await response.json();
        serverDetails.set(serverId, data);
        
        const serverRow = document.querySelector(`[data-server-id="${serverId}"]`);
        if (serverRow) {
            const addressElement = serverRow.querySelector('.server-address');
            const defaultAllocation = data.attributes.relationships.allocations.data.find(
                allocation => allocation.attributes.is_default
            );
            
            if (defaultAllocation) {
                addressElement.textContent = `${defaultAllocation.attributes.ip_alias}:${defaultAllocation.attributes.port}`;
            }
        }
    } catch (error) {
        console.error('Error fetching server details:', error);
    }
}

function connectToServer(serverId, numericId) {
    fetch(`/api/server/${serverId}/websocket`)
        .then(response => response.json())
        .then(data => {
            const socket = new WebSocket(data.data.socket);
            const serverRow = document.querySelector(`[data-server-id="${serverId}"]`);
            
            socket.onopen = () => {
                socket.send(JSON.stringify({ event: 'auth', args: [data.data.token] }));
            };

            socket.onmessage = (event) => {
                const message = JSON.parse(event.data);
                
                switch (message.event) {
                    case 'auth success':
                        socket.send(JSON.stringify({ event: 'send stats', args: [null] }));
                        fetchServerDetails(serverId);
                        break;
                    
                    case 'stats':
                        const stats = JSON.parse(message.args[0]);
                        updateServerStats(serverRow, stats);
                        break;
                    
                    case 'status':
                        updateServerStatus(serverRow, message.args[0]);
                        break;
                }
            };

            serverConnections.set(serverId, socket);
        })
        .catch(error => console.error('Error connecting to server:', error));
}


function updateServerStats(serverRow, stats) {
    if (!serverRow) return;

    const memoryUsage = (stats.memory_bytes / 1024 / 1024).toFixed(0);
    const memoryLimit = (stats.memory_limit_bytes / 1024 / 1024).toFixed(0);
    const memoryPercent = (stats.memory_bytes / stats.memory_limit_bytes * 100).toFixed(0);
    
    const memoryBar = serverRow.querySelector('.memory-bar');
    const memoryText = serverRow.querySelector('.memory-text');
    
    memoryBar.style.width = `${memoryPercent}%`;
    memoryText.textContent = `${memoryUsage}MiB`;

    const cpuPercent = (stats.cpu_absolute / 100).toFixed(0);
    const cpuBar = serverRow.querySelector('.cpu-bar');
    const cpuText = serverRow.querySelector('.cpu-text');
    
    cpuBar.style.width = `${cpuPercent}%`;
    cpuText.textContent = `${cpuPercent}%`;

    updateResourceColors(memoryBar, memoryPercent);
    updateResourceColors(cpuBar, cpuPercent);
}

function updateResourceColors(bar, percent) {
    bar.classList.remove('bg-emerald-500', 'bg-yellow-500', 'bg-red-500', 'bg-indigo-500');
    if (percent > 90) {
        bar.classList.add('bg-red-500');
    } else if (percent > 70) {
        bar.classList.add('bg-yellow-500');
    } else if (percent > 0) {
        bar.classList.add('bg-emerald-500');
    } else {
        bar.classList.add('bg-indigo-500');
    }
}

function updateServerStatus(serverRow, status) {
    if (!serverRow) return;

    const statusIndicator = serverRow.querySelector('.status-indicator');
    const statusText = serverRow.querySelector('.status-text');
    const statusContainer = statusIndicator.parentElement;

    statusIndicator.classList.remove('bg-emerald-400', 'bg-red-400', 'bg-yellow-400', 'bg-zinc-400');
    statusContainer.classList.remove('bg-emerald-500/20', 'bg-red-500/20', 'bg-yellow-500/20', 'bg-zinc-500/20');
    statusContainer.classList.remove('text-emerald-300', 'text-red-300', 'text-yellow-300', 'text-zinc-300');

    switch (status) {
        case 'running':
            statusIndicator.classList.add('bg-emerald-400');
            statusContainer.classList.add('bg-emerald-500/20', 'text-emerald-300');
            statusText.textContent = 'Powered on';
            break;
        case 'offline':
            statusIndicator.classList.add('bg-red-400');
            statusContainer.classList.add('bg-red-500/20', 'text-red-300');
            statusText.textContent = 'Powered off';
            break;
        case 'starting':
            statusIndicator.classList.add('bg-yellow-400');
            statusContainer.classList.add('bg-yellow-500/20', 'text-yellow-300');
            statusText.textContent = 'Starting';
            break;
        case 'stopping':
            statusIndicator.classList.add('bg-yellow-400');
            statusContainer.classList.add('bg-yellow-500/20', 'text-yellow-300');
            statusText.textContent = 'Stopping';
            break;
        default:
            statusIndicator.classList.add('bg-zinc-400');
            statusContainer.classList.add('bg-zinc-500/20', 'text-zinc-300');
            statusText.textContent = 'Unknown';
    }
}

document.querySelectorAll('.server-row').forEach(row => {
    const serverId = row.dataset.serverId;
    const numericId = row.dataset.serverNumeric;
    connectToServer(serverId, numericId);
});

fetch('/api/subuser-servers')
    .then(response => response.json())
    .then(servers => {
        if (servers.length > 0) {
            document.getElementById('shared-servers-section').classList.remove('hidden');
            const sharedServersList = document.getElementById('shared-servers-list');
            
            servers.forEach(server => {
                const serverRow = document.createElement('div');
                serverRow.className = 'server-row mb-4 bg-white/5 rounded-2xl hover:bg-white/10 border-2 border-dashed border-transparent hover:border-white/5 transition px-6 py-4 grid grid-cols-12 gap-4 items-center cursor-pointer';
                serverRow.setAttribute('data-server-id', server.id);
                serverRow.onclick = () => window.location.href = `/server/manage?id=${server.id}&numeric=0`;
                
                serverRow.innerHTML = `
                    
                    <div class="col-span-2">
                        <div class="font-medium text-white">${server.name}</div>
                    </div>

                    
                    <div class="col-span-2">
                        <div class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-zinc-500/20 text-zinc-300">
                            <div class="size-2 rounded-full bg-zinc-400 mr-2 status-indicator"></div>
                            <span class="status-text">Connecting...</span>
                        </div>
                    </div>

                    
                    <div class="col-span-2">
                        <div class="flex items-center gap-2">
                            <div class="w-full bg-white/10 rounded-full h-1.5">
                                <div class="memory-bar bg-indigo-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
                            </div>
                            <span class="text-xs memory-text">0MiB</span>
                        </div>
                    </div>

                    
                    <div class="col-span-2">
                        <div class="flex items-center gap-2">
                            <div class="w-full bg-white/10 rounded-full h-1.5">
                                <div class="cpu-bar bg-indigo-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
                            </div>
                            <span class="text-xs cpu-text">0%</span>
                        </div>
                    </div>

                    
                    <div class="col-span-3 ml-4">
                        <div class="text-xs font-mono text-white/70 bg-white/5 border border-white/5 px-3 py-1.5 rounded-lg shadow-sm">
                            <span class="server-address">Fetching...</span>
                        </div>
                    </div>
                `;
                
                sharedServersList.appendChild(serverRow);
                connectToServer(server.id, 0);
            });
        }
    })
    .catch(error => console.error('Error fetching shared servers:', error));

window.addEventListener('beforeunload', () => {
    serverConnections.forEach(socket => {
        if (socket.readyState === WebSocket.OPEN) {
            socket.close();
        }
    });
});

document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
        serverConnections.forEach((socket, serverId) => {
            if (socket.readyState !== WebSocket.OPEN) {
                connectToServer(serverId);
            }
        });
    }
});

setInterval(() => {
    serverConnections.forEach(socket => {
        if (socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ event: 'send stats', args: [null] }));
        }
    });
}, 10000);
</script>

<%- include('./components/page-scripts') %>